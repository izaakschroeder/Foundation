/*
 *  Iterable.h
 *  XQL
 *
 *  Created by Izaak Schroeder on 09-11-24.
 *  Copyright 2009 __MyCompanyName__. All rights reserved.
 *
 */

#ifndef _ITERABLE_H_
#define _ITERABLE_H_

#include "Core.h"
#include "Iterator.h"

#define _foreachvar(var) TOKENPASTE2(__i##var, __LINE__)
#define _foreachvar2(var) TOKENPASTE2(__iptr##var, __LINE__)

#define iterate(type, var, obj) \
type* _foreachvar(var) =(obj); \
if (!_foreachvar(var)->Valid()) delete _foreachvar(var); \
else for(type& var = *_foreachvar(var); _foreachvar(var)->Valid() ? true : (delete _foreachvar(var), false); _foreachvar(var)->Next())

#define foreach(type, var, obj) \
Iterator<type>* _foreachvar(var) =(obj).GetIterator(); \
if (!_foreachvar(var)->Valid()) delete _foreachvar(var); \
else for(Iterator<type>& var = *_foreachvar(var); _foreachvar(var)->Valid() ? true : (delete _foreachvar(var), false); ++var)



namespace I
{
	template <class T> class Iterable 
	{
	public:
		virtual Iterator<T>* GetIterator() const = 0;
	};
};

#endif
