/*
 *  List.h
 *  XQL
 *
 *  Created by Izaak Schroeder on 09-11-24.
 *  Copyright 2009 __MyCompanyName__. All rights reserved.
 *
 */

#ifndef _LIST_H_
#define _LIST_H_

#include "Core.h"
#include "Iterable.h"
#include "EqualityComparable.h"
#include "MutableIterator.h"

namespace I 
{
	template <typename T> class List : public Iterable<T>, public EqualityComparable<class List<T> >
	{
	
	public:
		//virtual List& Slice(unsigned int Offset, unsigned int Length) const = 0;
		//List& Slice(unsigned int Offset) const {
		//	return Slice(Offset, GetSize()-Offset);
		//}
		virtual unsigned int GetSize() const = 0;
		virtual T& operator [] (unsigned int index) const = 0;
		virtual bool IsEmpty() const = 0;
		virtual void Append(const T& Item) = 0;
		virtual void Insert(const T& Item, unsigned int Position = 0) = 0;
		virtual void Remove(unsigned int Position) = 0;
		virtual void Clear() = 0;
		virtual unsigned int IndexOf(const T&Item) const = 0;
		
		virtual MutableIterator<T>* GetMutableIterator() = 0;
		
		virtual bool operator == (const List<T>& Other) const {
			if (GetSize() != Other.GetSize())
				return false;
			for (unsigned int i=0; i<GetSize(); ++i)
				if ((*this)[i] != Other[i])
					return false;
			return true;
		};
		
		//virtual List<T> operator + (const List<T>&) const = 0;
	};
};

#endif